import pika
import random
import json
import time
import requests
from requests.auth import HTTPBasicAuth
import signal
import sys

# Configura√ß√µes do RabbitMQ
RABBITMQ_HOST = 'localhost'
RABBITMQ_ADMIN_USER = 'admin'
RABBITMQ_ADMIN_PASS = 'admin'
RABBITMQ_API_URL = f'http://{RABBITMQ_HOST}:15672/api'
HEADERS = {'Content-Type': 'application/json'}

# Fun√ß√£o para criar usu√°rios no RabbitMQ via API HTTP
def create_user(username, password):
    url = f"{RABBITMQ_API_URL}/users"
    payload = {
        "username": username,
        "password": password,
        "tags": "administrator"  # Ou "monitoring" ou qualquer outro tipo de permiss√£o, conforme necess√°rio
    }
    response = requests.post(url, auth=HTTPBasicAuth(RABBITMQ_ADMIN_USER, RABBITMQ_ADMIN_PASS), headers=HEADERS, json=payload)

    if response.status_code == 201:
        print(f"‚úÖ Usu√°rio {username} criado com sucesso!")
    else:
        print(f"‚ùå Falha ao criar usu√°rio {username}: {response.text}")

# Fun√ß√£o para criar e manter conex√µes no RabbitMQ usando pika
def create_connections(username, num_connections):
    connections = []
    for _ in range(num_connections):
        credentials = pika.PlainCredentials(username, username)  # Supondo que a senha seja igual ao nome de usu√°rio
        connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST, credentials=credentials))
        connections.append(connection)
        print(f"üîó Conex√£o criada para o usu√°rio {username}")

    return connections

# Fun√ß√£o para capturar o sinal de interrup√ß√£o (Ctrl+C) e fechar conex√µes corretamente
def signal_handler(signal, frame):
    print("\nüî¥ Interrompendo o script. Fechando as conex√µes...")
    for connection in connections_all:
        for conn in connection:
            conn.close()
    print("‚úÖ Todas as conex√µes fechadas. Script finalizado.")
    sys.exit(0)

# Registra o sinal de interrup√ß√£o para capturar Ctrl+C
signal.signal(signal.SIGINT, signal_handler)

# Lista para armazenar todas as conex√µes
connections_all = []

# Criar 10 usu√°rios
for i in range(1, 11):
    username = f"user_{i}"
    password = f"{username}_password"
    
    # Criar usu√°rio no RabbitMQ via API
    create_user(username, password)
    
    # Criar entre 5 e 50 conex√µes para cada usu√°rio
    num_connections = random.randint(5, 50)
    connections = create_connections(username, num_connections)
    connections_all.append(connections)

    print(f"‚úÖ Conex√µes abertas para o usu√°rio {username}, aguardando Ctrl+C para finalizar.\n")

# Manter o script rodando at√© o usu√°rio interromper
print("\nüéØ Script em execu√ß√£o. Pressione Ctrl+C para interromper.")
while True:
    time.sleep(1)  # Mant√©m o script rodando sem consumir muita CPU
