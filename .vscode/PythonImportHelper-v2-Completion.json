[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pika",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pika",
        "description": "pika",
        "detail": "pika",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "app-extension.node_modules.flatted.python.flatted",
        "description": "app-extension.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "app-extension.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "app-extension.node_modules.flatted.python.flatted",
        "description": "app-extension.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "app-extension.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "app-extension.node_modules.flatted.python.flatted",
        "description": "app-extension.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "app-extension.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "app-extension.node_modules.flatted.python.flatted",
        "description": "app-extension.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "app-extension.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "def create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))\n    if response.status_code in [200, 201, 204]:\n        print(f\"Usuário {username} criado com sucesso.\")\n    elif response.status_code == 400:\n        print(f\"Usuário {username} já existe.\")\n    else:\n        print(f\"Erro ao criar usuário {username}: {response.text}\")",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "create_connections_and_channels",
        "kind": 2,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "def create_connections_and_channels(username):\n    \"\"\"\n    Creates connections and channels for a given username.\n    Args:\n        username (str): The username for which connections and channels are created.\n    Returns:\n        list: A list of created connections.\n    Raises:\n        Exception: If an error occurs while creating a connection.\n    \"\"\"",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "keep_alive",
        "kind": 2,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "def keep_alive():\n    while True:\n        time.sleep(20)\n        for conn in all_connections:\n            try:\n                if conn.is_closed:\n                    print(\"Reconectando uma conexão fechada...\")\n                    all_connections.remove(conn)\n                    all_connections.extend(create_connections_and_channels(\"user_simulate_connection\"))\n                else:",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_API",
        "kind": 5,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "RABBITMQ_API = \"http://localhost:15672/api/users\"\nRABBITMQ_VHOST_API = \"http://localhost:15672/api/permissions/%2F\"\nRABBITMQ_VHOST = \"%2F\"\nRABBITMQ_HOST = \"localhost\"\nUSERNAME = \"admin\"\nPASSWORD = \"admin\"\nNUM_USERS = 15\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_VHOST_API",
        "kind": 5,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "RABBITMQ_VHOST_API = \"http://localhost:15672/api/permissions/%2F\"\nRABBITMQ_VHOST = \"%2F\"\nRABBITMQ_HOST = \"localhost\"\nUSERNAME = \"admin\"\nPASSWORD = \"admin\"\nNUM_USERS = 15\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_VHOST",
        "kind": 5,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "RABBITMQ_VHOST = \"%2F\"\nRABBITMQ_HOST = \"localhost\"\nUSERNAME = \"admin\"\nPASSWORD = \"admin\"\nNUM_USERS = 15\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_HOST",
        "kind": 5,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "RABBITMQ_HOST = \"localhost\"\nUSERNAME = \"admin\"\nPASSWORD = \"admin\"\nNUM_USERS = 15\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))\n    if response.status_code in [200, 201, 204]:",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "USERNAME = \"admin\"\nPASSWORD = \"admin\"\nNUM_USERS = 15\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))\n    if response.status_code in [200, 201, 204]:\n        print(f\"Usuário {username} criado com sucesso.\")",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "PASSWORD = \"admin\"\nNUM_USERS = 15\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))\n    if response.status_code in [200, 201, 204]:\n        print(f\"Usuário {username} criado com sucesso.\")\n    elif response.status_code == 400:",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "NUM_USERS",
        "kind": 5,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "NUM_USERS = 15\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))\n    if response.status_code in [200, 201, 204]:\n        print(f\"Usuário {username} criado com sucesso.\")\n    elif response.status_code == 400:\n        print(f\"Usuário {username} já existe.\")",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "all_connections",
        "kind": 5,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "all_connections = []\nthreads = []\nfor i in range(NUM_USERS):\n    user = f\"user_simulate_connection_{i}\"\n    create_user(user)\n    thread = threading.Thread(target=lambda: all_connections.extend(create_connections_and_channels(user)))\n    thread.start()\n    threads.append(thread)\n# Aguarde todas as threads finalizarem\nfor thread in threads:",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "threads = []\nfor i in range(NUM_USERS):\n    user = f\"user_simulate_connection_{i}\"\n    create_user(user)\n    thread = threading.Thread(target=lambda: all_connections.extend(create_connections_and_channels(user)))\n    thread.start()\n    threads.append(thread)\n# Aguarde todas as threads finalizarem\nfor thread in threads:\n    thread.join()",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "keep_alive_thread",
        "kind": 5,
        "importPath": "scripts.simulate_connections",
        "description": "scripts.simulate_connections",
        "peekOfCode": "keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)\nkeep_alive_thread.start()\n# Manter as conexões abertas\ntry:\n    while True:\n        time.sleep(10)\nexcept KeyboardInterrupt:\n    print(\"Encerrando conexões...\")\n    for conn in all_connections:\n        if conn.is_open:",
        "detail": "scripts.simulate_connections",
        "documentation": {}
    },
    {
        "label": "simulate_exchange_queues_and_messages",
        "kind": 2,
        "importPath": "scripts.simulate_exchange_queues_and_messages",
        "description": "scripts.simulate_exchange_queues_and_messages",
        "peekOfCode": "def simulate_exchange_queues_and_messages():\n    \"\"\"\n    Simulates the creation of exchanges, queues, and messages in RabbitMQ.\n    This script connects to a RabbitMQ server and performs the following steps:\n    1. Creates a specified number of exchanges with random types (direct, fanout, or topic).\n    2. Creates a specified number of queues.\n    3. Creates random bindings between exchanges and queues.\n    4. Generates and publishes random messages to each queue.\n    The script uses the pika library to interact with RabbitMQ.\n    Note: Make sure to update the RabbitMQ host, username, and password before running the script.",
        "detail": "scripts.simulate_exchange_queues_and_messages",
        "documentation": {}
    }
]