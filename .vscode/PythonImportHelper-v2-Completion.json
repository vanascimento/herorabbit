[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pika",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pika",
        "description": "pika",
        "detail": "pika",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "app-extension.node_modules.flatted.python.flatted",
        "description": "app-extension.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "app-extension.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "app-extension.node_modules.flatted.python.flatted",
        "description": "app-extension.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "app-extension.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "app-extension.node_modules.flatted.python.flatted",
        "description": "app-extension.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "app-extension.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "app-extension.node_modules.flatted.python.flatted",
        "description": "app-extension.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "app-extension.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "def create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))\n    if response.status_code in [200, 201, 204]:\n        print(f\"Usuário {username} criado com sucesso.\")\n    elif response.status_code == 400:\n        print(f\"Usuário {username} já existe.\")\n    else:\n        print(f\"Erro ao criar usuário {username}: {response.text}\")",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "create_connections_and_channels",
        "kind": 2,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "def create_connections_and_channels(username):\n    connections = []\n    num_connections = random.randint(10, 100)\n    for _ in range(num_connections):\n        try:\n            connection = pika.BlockingConnection(\n                pika.ConnectionParameters(\n                    host=RABBITMQ_HOST,\n                    credentials=pika.PlainCredentials(username, \"password\"),\n                    client_properties={\"connection_name\": f\"connection of {username}\"},",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "keep_alive",
        "kind": 2,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "def keep_alive():\n    while True:\n        time.sleep(20)\n        for conn in all_connections:\n            try:\n                if conn.is_closed:\n                    print(\"Reconectando uma conexão fechada...\")\n                    all_connections.remove(conn)\n                    all_connections.extend(create_connections_and_channels(\"user_simulate_connection\"))\n                else:",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_API",
        "kind": 5,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "RABBITMQ_API = \"http://localhost:15672/api/users\"\nRABBITMQ_VHOST_API = \"http://localhost:15672/api/permissions/%2F\"\nRABBITMQ_VHOST = \"%2F\"\nRABBITMQ_HOST = \"localhost\"\nUSERNAME = \"admin\"\nPASSWORD = \"admin\"\nNUM_USERS = 30\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_VHOST_API",
        "kind": 5,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "RABBITMQ_VHOST_API = \"http://localhost:15672/api/permissions/%2F\"\nRABBITMQ_VHOST = \"%2F\"\nRABBITMQ_HOST = \"localhost\"\nUSERNAME = \"admin\"\nPASSWORD = \"admin\"\nNUM_USERS = 30\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_VHOST",
        "kind": 5,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "RABBITMQ_VHOST = \"%2F\"\nRABBITMQ_HOST = \"localhost\"\nUSERNAME = \"admin\"\nPASSWORD = \"admin\"\nNUM_USERS = 30\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_HOST",
        "kind": 5,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "RABBITMQ_HOST = \"localhost\"\nUSERNAME = \"admin\"\nPASSWORD = \"admin\"\nNUM_USERS = 30\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))\n    if response.status_code in [200, 201, 204]:",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "USERNAME = \"admin\"\nPASSWORD = \"admin\"\nNUM_USERS = 30\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))\n    if response.status_code in [200, 201, 204]:\n        print(f\"Usuário {username} criado com sucesso.\")",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "PASSWORD = \"admin\"\nNUM_USERS = 30\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))\n    if response.status_code in [200, 201, 204]:\n        print(f\"Usuário {username} criado com sucesso.\")\n    elif response.status_code == 400:",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "NUM_USERS",
        "kind": 5,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "NUM_USERS = 30\n# Criar usuários no RabbitMQ\ndef create_user(username):\n    url = f\"{RABBITMQ_API}/{username}\"\n    user_data = {\"password\": \"password\", \"tags\": \"\"}\n    response = requests.put(url, json=user_data, auth=(USERNAME, PASSWORD))\n    if response.status_code in [200, 201, 204]:\n        print(f\"Usuário {username} criado com sucesso.\")\n    elif response.status_code == 400:\n        print(f\"Usuário {username} já existe.\")",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "all_connections",
        "kind": 5,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "all_connections = []\nthreads = []\nfor i in range(NUM_USERS):\n    user = f\"user_simulate_connection_{i}\"\n    create_user(user)\n    thread = threading.Thread(target=lambda: all_connections.extend(create_connections_and_channels(user)))\n    thread.start()\n    threads.append(thread)\n# Aguarde todas as threads finalizarem\nfor thread in threads:",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "threads = []\nfor i in range(NUM_USERS):\n    user = f\"user_simulate_connection_{i}\"\n    create_user(user)\n    thread = threading.Thread(target=lambda: all_connections.extend(create_connections_and_channels(user)))\n    thread.start()\n    threads.append(thread)\n# Aguarde todas as threads finalizarem\nfor thread in threads:\n    thread.join()",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "keep_alive_thread",
        "kind": 5,
        "importPath": "scripts.create_connections",
        "description": "scripts.create_connections",
        "peekOfCode": "keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)\nkeep_alive_thread.start()\n# Manter as conexões abertas\ntry:\n    while True:\n        time.sleep(10)\nexcept KeyboardInterrupt:\n    print(\"Encerrando conexões...\")\n    for conn in all_connections:\n        if conn.is_open:",
        "detail": "scripts.create_connections",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_HOST",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "RABBITMQ_HOST = 'localhost'\nRABBITMQ_USER = 'admin'\nRABBITMQ_PASS = 'admin'\n# Definições\nNUM_EXCHANGES = 5\nNUM_QUEUES = 200  # Alterado de 10 para 200\nEXCHANGE_TYPES = ['direct', 'fanout', 'topic']\n# Chaves aleatórias para simular transações financeiras\nTRANSACTION_KEYS = [\"transaction_id\", \"amount\", \"currency\", \"timestamp\", \"status\", \"sender\", \"receiver\", \"location\", \"payment_method\", \"description\"]\n# Conectar ao RabbitMQ",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_USER",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "RABBITMQ_USER = 'admin'\nRABBITMQ_PASS = 'admin'\n# Definições\nNUM_EXCHANGES = 5\nNUM_QUEUES = 200  # Alterado de 10 para 200\nEXCHANGE_TYPES = ['direct', 'fanout', 'topic']\n# Chaves aleatórias para simular transações financeiras\nTRANSACTION_KEYS = [\"transaction_id\", \"amount\", \"currency\", \"timestamp\", \"status\", \"sender\", \"receiver\", \"location\", \"payment_method\", \"description\"]\n# Conectar ao RabbitMQ\ncredentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "RABBITMQ_PASS",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "RABBITMQ_PASS = 'admin'\n# Definições\nNUM_EXCHANGES = 5\nNUM_QUEUES = 200  # Alterado de 10 para 200\nEXCHANGE_TYPES = ['direct', 'fanout', 'topic']\n# Chaves aleatórias para simular transações financeiras\nTRANSACTION_KEYS = [\"transaction_id\", \"amount\", \"currency\", \"timestamp\", \"status\", \"sender\", \"receiver\", \"location\", \"payment_method\", \"description\"]\n# Conectar ao RabbitMQ\ncredentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST, credentials=credentials))",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "NUM_EXCHANGES",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "NUM_EXCHANGES = 5\nNUM_QUEUES = 200  # Alterado de 10 para 200\nEXCHANGE_TYPES = ['direct', 'fanout', 'topic']\n# Chaves aleatórias para simular transações financeiras\nTRANSACTION_KEYS = [\"transaction_id\", \"amount\", \"currency\", \"timestamp\", \"status\", \"sender\", \"receiver\", \"location\", \"payment_method\", \"description\"]\n# Conectar ao RabbitMQ\ncredentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST, credentials=credentials))\nchannel = connection.channel()\n# Criar exchanges",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "NUM_QUEUES",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "NUM_QUEUES = 200  # Alterado de 10 para 200\nEXCHANGE_TYPES = ['direct', 'fanout', 'topic']\n# Chaves aleatórias para simular transações financeiras\nTRANSACTION_KEYS = [\"transaction_id\", \"amount\", \"currency\", \"timestamp\", \"status\", \"sender\", \"receiver\", \"location\", \"payment_method\", \"description\"]\n# Conectar ao RabbitMQ\ncredentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST, credentials=credentials))\nchannel = connection.channel()\n# Criar exchanges\nexchanges = []",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "EXCHANGE_TYPES",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "EXCHANGE_TYPES = ['direct', 'fanout', 'topic']\n# Chaves aleatórias para simular transações financeiras\nTRANSACTION_KEYS = [\"transaction_id\", \"amount\", \"currency\", \"timestamp\", \"status\", \"sender\", \"receiver\", \"location\", \"payment_method\", \"description\"]\n# Conectar ao RabbitMQ\ncredentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST, credentials=credentials))\nchannel = connection.channel()\n# Criar exchanges\nexchanges = []\nfor i in range(NUM_EXCHANGES):",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "TRANSACTION_KEYS",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "TRANSACTION_KEYS = [\"transaction_id\", \"amount\", \"currency\", \"timestamp\", \"status\", \"sender\", \"receiver\", \"location\", \"payment_method\", \"description\"]\n# Conectar ao RabbitMQ\ncredentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST, credentials=credentials))\nchannel = connection.channel()\n# Criar exchanges\nexchanges = []\nfor i in range(NUM_EXCHANGES):\n    exchange_name = f\"exchange_{i+1}\"\n    exchange_type = random.choice(EXCHANGE_TYPES)  # Tipo aleatório",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "credentials",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "credentials = pika.PlainCredentials(RABBITMQ_USER, RABBITMQ_PASS)\nconnection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST, credentials=credentials))\nchannel = connection.channel()\n# Criar exchanges\nexchanges = []\nfor i in range(NUM_EXCHANGES):\n    exchange_name = f\"exchange_{i+1}\"\n    exchange_type = random.choice(EXCHANGE_TYPES)  # Tipo aleatório\n    channel.exchange_declare(exchange=exchange_name, exchange_type=exchange_type, durable=True)\n    exchanges.append(exchange_name)",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "connection",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST, credentials=credentials))\nchannel = connection.channel()\n# Criar exchanges\nexchanges = []\nfor i in range(NUM_EXCHANGES):\n    exchange_name = f\"exchange_{i+1}\"\n    exchange_type = random.choice(EXCHANGE_TYPES)  # Tipo aleatório\n    channel.exchange_declare(exchange=exchange_name, exchange_type=exchange_type, durable=True)\n    exchanges.append(exchange_name)\n    print(f\"✅ Exchange criada: {exchange_name} ({exchange_type})\")",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "channel",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "channel = connection.channel()\n# Criar exchanges\nexchanges = []\nfor i in range(NUM_EXCHANGES):\n    exchange_name = f\"exchange_{i+1}\"\n    exchange_type = random.choice(EXCHANGE_TYPES)  # Tipo aleatório\n    channel.exchange_declare(exchange=exchange_name, exchange_type=exchange_type, durable=True)\n    exchanges.append(exchange_name)\n    print(f\"✅ Exchange criada: {exchange_name} ({exchange_type})\")\n# Criar filas",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "exchanges",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "exchanges = []\nfor i in range(NUM_EXCHANGES):\n    exchange_name = f\"exchange_{i+1}\"\n    exchange_type = random.choice(EXCHANGE_TYPES)  # Tipo aleatório\n    channel.exchange_declare(exchange=exchange_name, exchange_type=exchange_type, durable=True)\n    exchanges.append(exchange_name)\n    print(f\"✅ Exchange criada: {exchange_name} ({exchange_type})\")\n# Criar filas\nqueues = []\nfor i in range(NUM_QUEUES):",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    },
    {
        "label": "queues",
        "kind": 5,
        "importPath": "scripts.create_exchanges_and_bindings",
        "description": "scripts.create_exchanges_and_bindings",
        "peekOfCode": "queues = []\nfor i in range(NUM_QUEUES):\n    queue_name = f\"queue_{i+1}\"\n    channel.queue_declare(queue=queue_name, durable=True)\n    queues.append(queue_name)\n    print(f\"✅ Fila criada: {queue_name}\")\n# Criar bindings aleatórios entre exchanges e filas\nfor queue in queues:\n    num_bindings = random.randint(1, 3)  # Cada fila terá entre 1 e 3 bindings\n    for _ in range(num_bindings):",
        "detail": "scripts.create_exchanges_and_bindings",
        "documentation": {}
    }
]